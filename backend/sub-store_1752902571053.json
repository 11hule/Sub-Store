{
  "subs": [
    {
      "name": "share",
      "displayName": "分享",
      "form": "",
      "mergeSources": "localFirst",
      "ignoreFailedRemoteSub": "quiet",
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Server.png",
      "process": [
        {
          "type": "Script Operator",
          "args": {
            "content": "function operator(proxies = []) {\n  // 按 server 分组\n  const groups = proxies.reduce((acc, proxy) => {\n    if (!acc[proxy.server]) {\n      acc[proxy.server] = [];\n    }\n    acc[proxy.server].push(proxy);\n    return acc;\n  }, {});\n\n  // 处理每个分组\n  const result = [];\n  for (const server in groups) {\n    const group = groups[server];\n    if (group.length === 1) {\n      // 只有一个项直接保留\n      result.push(group[0]);\n    } else {\n      // 多个项时\n      const hasTrojan = group.some((p) => p.type === \"trojan\");\n      if (hasTrojan) {\n        // 有 trojan 时, 选择第一个非 trojan 的\n        const nonTrojan = group.find((p) => p.type !== \"trojan\");\n        if (nonTrojan) result.push(nonTrojan);\n      } else {\n        // 没有 trojan 时, 选择第一个\n        result.push(group[0]);\n      }\n    }\n  }\n  return result;\n}",
            "mode": "script",
            "arguments": {}
          },
          "id": "76387925.7918599",
          "disabled": false
        },
        {
          "type": "Sort Operator",
          "args": "asc",
          "id": "77353881.26368979",
          "disabled": false
        },
        {
          "type": "Handle Duplicate Operator",
          "args": {
            "action": "rename",
            "position": "back",
            "template": "0 1 2 3 4 5 6 7 8 9",
            "link": "-"
          },
          "id": "92786012.18382104",
          "disabled": false
        }
      ],
      "source": "local",
      "url": "https://gist.githubusercontent.com/xqg107/6aed2b452a85bde8e493112cd2d07a15/raw/PCg#insecure&noFlow\nhttps://chromego-sub.netlify.app/sub/base64.txt\nhttps://substore.vocrx.com/share/sub/vocrxshare?token=SrxVX8OJWvowpX3x934-t&includeUnsupportedProxy=true\nhttps://fuckme.lovebabyforever.workers.dev/qx\nhttps://dy.ccjdjb.dpdns.org/sub?token=t.me/ccjdjbQaQ\nhttps://gist.githubusercontent.com/Yu9191/07a366dfe7e1669d1fe2e7ba8c945047/raw/VPN.txt#insecure\nhttps://gist.githubusercontent.com/byrisk/b8954fed7476b150ccb71e41e9ed1f1e/raw/MQFree.yaml#insecure\nhttps://sub.vip.sd/K4RVQbkdvtdGs7GAmH1V/download/ss",
      "content": "🇦🇹 netcup GmbH [ss]=ss,152.53.2.128,34045,encrypt-method=aes-256-gcm,password=\"TG:@Enkelte_notif&&TG:@Notif_Chat\",tfo=true,udp-relay=true\n🇫🇷 Fbw Networks SAS [vmess]=vmess,185.142.53.63,43585,username=2babf34a-16f5-4e38-a885-738fdfc8eabf,vmess-aead=true,tls=false,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Akari Networks [vmess] 中转²=vmess,monocerotis.weltknoten.xyz,30002,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=monocerotis.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Akari Networks [vmess] 中转³=vmess,orionis.weltknoten.xyz,30003,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=orionis.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Akari Networks [vmess] 中转¹=vmess,phoenicis.weltknoten.xyz,30004,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=phoenicis.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Akari Networks [vmess] 中转⁴=vmess,scorpii.weltknoten.xyz,30020,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=scorpii.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 HKT Limited [vmess] 中转=vmess,andromedae.weltknoten.xyz,30001,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=andromedae.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Hytron Network Services Limited [snell]=snell,hyhk.cnmmb.com,8443,version=4,psk=WoHaoKuaiLeA,tfo=true,udp-relay=true,shadow-tls-password=WoHaoKuaiLeA,shadow-tls-version=3,shadow-tls-sni=gateway.icloud.com,reuse=true\n🇭🇰 Kirino LLC [snell]=snell,37.123.196.21,36415,version=4,psk=KnEtPK9uA0VGcfL5OubXHqdgrg7hf3k,tfo=true,udp-relay=true\n🇭🇰 VELO-LINK [ss]=ss,156.245.190.21,15012,encrypt-method=aes-256-gcm,password=\"ABOUFYCCZZDPO79V\",tfo=true,udp-relay=true\n🇭🇰 rainbow network limited ➮ 🇩🇪 Hetzner Online GmbH [vmess]=vmess,103.115.44.87,49322,username=426da66e-b9a1-439c-d85f-af83d19879fc,ws=true,ws-path=/,ws-headers=Host:\"legendvps.gmaill.ddns-ip.net\",vmess-aead=true,tls=true,sni=legendvps.gmaill.ddns-ip.net,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 AMAZON-02 [hysteria2]²=hysteria2,18.179.205.21,22104,password=\"1U8N1DTJHuKbviXMko6QMZvaA\",sni=bing.com,skip-cert-verify=true,tfo=true\n🇯🇵 AMAZON-02 [hysteria2]¹=hysteria2,52.195.234.11,6196,password=\"oyWzQP93hDblH43bdxnTBix6o\",sni=bing.com,skip-cert-verify=true,tfo=true\n🇯🇵 AMAZON-02 [snell]=snell,52.195.206.4,8648,version=4,psk=1d213G22133W~QtJdOfsdWhgsblqjrnSHO,tfo=true,udp-relay=true\n🇯🇵 AMAZON-02 [trojan]=trojan,52.199.150.136,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 AMAZON-02 [vmess]²=vmess,52.199.45.83,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 AMAZON-02 [vmess]¹=vmess,52.198.199.96,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 Tencent Building Kejizhongyi Avenue [trojan]=trojan,43.167.220.90,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 WAP.AC LTD [snell]=snell,103.238.129.37,30002,version=4,psk=DfUAx9s78Jbc2Ycj,tfo=true,udp-relay=true,reuse=true\n🇰🇷 Korea Telecom [vmess]=vmess,125.139.134.133,21791,username=bc29535d-dcbe-4663-cfc3-16cb14ba13da,vmess-aead=true,tls=false,skip-cert-verify=true,tfo=true,udp-relay=true\n🇰🇷 Tencent Building Kejizhongyi Avenue [trojan]=trojan,101.33.74.37,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇳🇱 Timeweb LLP [ss]=ss,109.71.246.210,56689,encrypt-method=chacha20-ietf-poly1305,password=\"YQCSKoCF3QazW8YlvDBWA4\",tfo=true,udp-relay=true\n🇷🇺 LLC Baxet [ss]=ss,46.17.40.79,38674,encrypt-method=aes-256-gcm,password=\"dongtaiwang.com\",tfo=true,udp-relay=true\n🇸🇬 Alibaba US Technology Co. Ltd. [snell]=snell,8.219.72.1,56341,version=4,psk=dqWlVs6Kd2wU10m5,tfo=true,udp-relay=true\n🇸🇬 Coaxial Cable LLC ➮ 🇩🇪 Hetzner Online GmbH [snell]=snell,2a14:7dc0:100:1013::2fe,50205,version=4,psk=PZ7cg6fZtSgv8RCJC8Av,tfo=true,udp-relay=true,reuse=true\n🇸🇬 Dromatics Systems Pte Ltd [snell]=snell,103.195.189.166,31927,version=4,psk=xq6nOQNGSzik1V41,tfo=true,udp-relay=true\n🇸🇬 LEASEWEB SINGAPORE PTE. LTD. [snell]=snell,194.127.192.250,13000,version=4,psk=0Ah1HHzDc1Nmt42i,tfo=true,udp-relay=true,reuse=true\n🇸🇬 ORACLE-BMC-31898 [snell]²=snell,213.35.105.166,43254,version=4,psk=5GrbAIGuTBW9C1Cp,tfo=true,udp-relay=true\n🇸🇬 ORACLE-BMC-31898 [snell]³=snell,2603:c024:4506:9daa:f879:f945:e96f:9007,43254,version=4,psk=5GrbAIGuTBW9C1Cp,tfo=true,udp-relay=true\n🇸🇬 ORACLE-BMC-31898 [snell]¹=snell,129.150.61.95,2345,version=4,psk=6L4nGby8vj2Va1qF,tfo=true,udp-relay=true,reuse=true\n🇸🇬 Tencent Building Kejizhongyi Avenue [trojan]²=trojan,43.156.229.234,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 Tencent Building Kejizhongyi Avenue [trojan]¹=trojan,43.163.88.120,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 Tencent Building Kejizhongyi Avenue [vmess]=vmess,43.159.39.33,35710,username=c53cfb28-3a92-455e-ed7b-2f16c7b7988b,vmess-aead=true,tls=false,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 BACK WAVES LIMITED [snell]=snell,23.130.4.23,54210,version=4,psk=vknO59ftfNWMLktraazo,tfo=true,udp-relay=true,reuse=true\n🇺🇸 COGENT-174 [vmess]=vmess,216.151.163.240,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 DMIT [snell]=snell,154.17.238.12,32143,version=4,psk=deyFTuaOwftpAeYi,tfo=true,udp-relay=true\n🇺🇸 HURRICANE ➮ 🇺🇸 NETLAB-SDN [hysteria2]=hysteria2,2001:0470:1f07:0b6f:0000:0000:9716:252b,8883,password=\"c4ba2871-d699-49db-b8ba-afbb554a5741\",skip-cert-verify=true,tfo=true\n🇺🇸 MULTA-ASN1 [vmess]=vmess,104.156.141.35,30003,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/051215250222,vmess-aead=false,tls=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 ORACLE-BMC-31898 [snell]=snell,146.235.219.32,23154,version=4,psk=Xu12Ih2xX0IggQZH,obfs=http,obfs-host=www.bing.com,tfo=true,udp-relay=true\n🇺🇸 PEG-SV [vmess]²=vmess,38.33.23.99,30003,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/1731308509259,vmess-aead=false,tls=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 PEG-SV [vmess]³=vmess,38.11.69.44,30004,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/053526061725,vmess-aead=false,tls=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 PEG-SV [vmess]¹=vmess,198.2.195.4,38005,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/1734602715881,vmess-aead=false,tls=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 SHARKTECH [vmess]=vmess,107.167.31.111,31004,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/1741541907079,vmess-aead=false,tls=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 VELO-LINK [ss]²=ss,23.185.248.25,17015,encrypt-method=aes-256-gcm,password=\"Q3TLFOVWZ3209GLZ\",tfo=true,udp-relay=true\n🇺🇸 VELO-LINK [ss]³=ss,23.185.248.24,17014,encrypt-method=aes-256-gcm,password=\"A0H0OBEJBEGY1NWI\",tfo=true,udp-relay=true\n🇺🇸 VELO-LINK [ss]¹=ss,23.185.248.26,17016,encrypt-method=aes-256-gcm,password=\"MNQ1KL87JAXWHP15\",tfo=true,udp-relay=true\n🇺🇸 VELO-LINK [ss]⁴=ss,23.185.248.23,17013,encrypt-method=aes-256-gcm,password=\"92MP0FXPOXITE9LF\",tfo=true,udp-relay=true\n🇺🇸 VELO-LINK [ss]⁵=ss,23.185.248.22,17012,encrypt-method=aes-256-gcm,password=\"1YZBIAN77GAQFQEJ\",tfo=true,udp-relay=true\n🇺🇸 VELO-LINK [ss]⁶=ss,23.185.248.21,17011,encrypt-method=aes-256-gcm,password=\"NWYDVGG3XD0HR9QF\",tfo=true,udp-relay=true\n🇺🇸 VELO-LINK [ss]⁷=ss,23.185.248.20,17010,encrypt-method=aes-256-gcm,password=\"AR4OIUT5RZBAIRRA\",tfo=true,udp-relay=true\n🇺🇸 VELO-LINK [ss]⁸=ss,23.185.248.19,17009,encrypt-method=aes-256-gcm,password=\"ZM63VSF3RPIE97TD\",tfo=true,udp-relay=true\n🇻🇳 VIETPN Company Limited [ss]=ss,103.186.155.30,38388,encrypt-method=aes-256-cfb,password=\"Xn8jKdmDM00IeO%#$#fJAMtsEAEUOpH/YWYtYqDFnT0SV\",tfo=true,udp-relay=true",
      "ua": "",
      "tag": [],
      "display-name": "分享",
      "subscriptionTags": [],
      "isIconColor": true
    },
    {
      "name": "speed-test",
      "displayName": "测速",
      "form": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Speedtest.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "DISABLED",
            "udp": "DEFAULT",
            "scert": "DEFAULT",
            "tfo": "DEFAULT",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/availability.js#cache&timeout=1999&retries=0",
            "mode": "link"
          },
          "id": "60370891.72786498",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/speed.js#size=10&timeout=10000&concurrency=10&cache&show_speed",
            "mode": "link"
          },
          "id": "9518187.430566316",
          "disabled": false
        }
      ],
      "source": "local",
      "url": "",
      "content": "\n🇩🇪 AMAZON-02 [trojan]⁰¹ share=trojan,golden-krill.treefrog761.one,443,password=\"3723507166611775488\",tls=true,sni=golden-krill.treefrog761.one,skip-cert-verify=true,tfo=true,udp-relay=true\n🇩🇪 AMAZON-02 [trojan]⁰² share=trojan,improved-platypus.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=improved-platypus.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇩🇪 DIGITALOCEAN-ASN [vmess] share=vmess,167.71.33.117,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇩🇪 G-Core Labs S.A. [trojan]⁰¹ share=trojan,fancy-dragon.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=fancy-dragon.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇩🇪 G-Core Labs S.A. [trojan]⁰² share=trojan,relaxed-platypus.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=relaxed-platypus.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇩🇪 G-Core Labs S.A. [trojan]⁰³ share=trojan,eternal-chipmunk.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=eternal-chipmunk.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇩🇪 G-Core Labs S.A. [trojan]⁰⁴ share=trojan,accurate-krill.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=accurate-krill.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇩🇪 G-Core Labs S.A. [trojan]⁰⁵ share=trojan,exciting-oarfish.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=exciting-oarfish.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇩🇪 Hetzner Online GmbH [snell] share=snell,188.245.197.12,2345,version=4,psk=sQOZP2qcqz6lzQkA,obfs=http,obfs-host=www.bing.com,tfo=true,udp-relay=true,reuse=true\n🇩🇪 Kirino LLC [snell] share=snell,82.115.31.187,6153,version=4,psk=ap5201314,tfo=true,udp-relay=true\n🇬🇧 G-Core Labs S.A. [trojan] share=trojan,outgoing-goose.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=outgoing-goose.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n\n🇸🇬 AMAZON-02 [snell]⁰¹ share=snell,lightsailsg.revolver.ink,24382,version=4,psk=\"wn0DOjqFLt5I6nt7VRik\",tfo=true,udp-relay=true\n🇸🇬 AMAZON-02 [snell]⁰² share=snell,18.142.196.143,14250,version=4,psk=8QYc9zTowGlChZDIce684lNcD5k6Dha,tfo=true,udp-relay=true,reuse=true\n🇸🇬 AMAZON-02 [trojan]⁰¹ share=trojan,enabled-robin.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=enabled-robin.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 AMAZON-02 [trojan]⁰² share=trojan,tidy-puma.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=tidy-puma.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 AMAZON-02 [trojan]⁰³ share=trojan,18.141.177.89,50949,password=\"TTM0P5wxbm\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 AMAZON-02 [trojan]⁰⁴ share=trojan,boss-iguana.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=boss-iguana.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 Dromatics Systems Pte Ltd [snell] share=snell,103.195.189.166,31927,version=4,psk=xq6nOQNGSzik1V41,tfo=true,udp-relay=true\n🇸🇬 ORACLE-BMC-31898 [snell]⁰¹ share=snell,oracle.sin.as917.net,22452,version=4,psk=ZLFF5kXeFDjRtlss,tfo=true,udp-relay=true\n🇸🇬 ORACLE-BMC-31898 [snell]⁰² share=snell,oraclesgp.revolver.ink,24382,version=4,psk=hrqAjPi2rYZVCHNalBTgHA,tfo=true,udp-relay=true\n🇸🇬 ORACLE-BMC-31898 [vmess] share=vmess,152.69.218.97,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 UpCloud Ltd [trojan]⁰¹ share=trojan,on-pig.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=on-pig.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 UpCloud Ltd [trojan]⁰² share=trojan,composed-shepherd.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=composed-shepherd.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 UpCloud Ltd [trojan]⁰³ share=trojan,sacred-hamster.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=sacred-hamster.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 UpCloud Ltd [trojan]⁰⁴ share=trojan,feasible-jawfish.skink888.homes,443,password=\"3723507166611775488\",tls=true,sni=feasible-jawfish.skink888.homes,skip-cert-verify=true,tfo=true,udp-relay=true\n",
      "ua": "",
      "tag": [
        "检测"
      ],
      "display-name": "测速",
      "subscriptionTags": []
    },
    {
      "name": "geo-test",
      "displayName": "落地检测",
      "form": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": "quiet",
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "DISABLED",
            "udp": "ENABLED",
            "scert": "ENABLED",
            "tfo": "ENABLED",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Regex Filter",
          "args": {
            "keep": false,
            "regex": [
              "^(#|\\/\\/)"
            ]
          },
          "id": "53433073.30347516",
          "disabled": false
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Google",
            "type": "IPv4",
            "filter": "disabled",
            "cache": "enabled",
            "url": ""
          },
          "id": "40233010.57528247",
          "disabled": false
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Cloudflare",
            "type": "IPv6",
            "filter": "IPOnly",
            "cache": "enabled",
            "url": ""
          },
          "id": "26345051.98838817",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "function operator(proxies = []) {\n    function removeDuplicates(arr, fields) {\n        const map = new Map()\n        return arr.filter(item => {\n            const key = fields.map(field => item[field]).join('-')\n            if (map.has(key)) {\n                return false\n            } else {\n                map.set(key, true)\n                return true\n            }\n        })\n    }\n    return removeDuplicates(proxies, ['server', 'port', 'type'])\n}\n",
            "mode": "script",
            "arguments": {}
          },
          "id": "95704959.8891461",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/geo.js#cache&format=%3C%7B%7Bapi.countryCode%7D%7D%3E%20%7B%7Bapi.aso%20%7C%7C%20'Sector%202814'%20%7D%7D%20%5B%7B%7Bproxy.type%7D%7D%5D&geo&internal&retries=1&timeout=1999",
            "mode": "link",
            "arguments": {
              "cache": true,
              "format": "<{{api.countryCode}}> {{api.aso || 'Sector 2814' }} [{{proxy.type}}]",
              "geo": true,
              "internal": true,
              "retries": "1",
              "timeout": "1999"
            }
          },
          "id": "81096408.2142662",
          "disabled": false
        },
        {
          "type": "Script Filter",
          "args": {
            "content": "return $server._geo",
            "mode": "script",
            "arguments": {}
          },
          "id": "85967912.58760595",
          "disabled": false
        },
        {
          "type": "Flag Operator",
          "args": {
            "mode": "add",
            "tw": "ws"
          },
          "id": "48034400.69031853",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "delete $server._geo\n$server.name = $server.name.replace(/(\\s*)\\<.*?\\>\\s*/gi, '$1')",
            "mode": "script",
            "arguments": {}
          },
          "id": "93023814.22544846",
          "disabled": false
        },
        {
          "type": "Sort Operator",
          "args": "asc",
          "id": "38897913.79490925",
          "disabled": false
        },
        {
          "type": "Handle Duplicate Operator",
          "args": {
            "action": "rename",
            "position": "back",
            "template": "⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹",
            "link": ""
          },
          "id": "84882948.57123472",
          "disabled": false
        }
      ],
      "source": "local",
      "url": "",
      "content": "",
      "ua": "",
      "tag": [
        "检测"
      ],
      "display-name": "落地检测",
      "subscriptionTags": [],
      "isIconColor": true
    },
    {
      "name": "entrance-geo-test-internal",
      "displayName": "入口 & 落地 检测(使用 GEOIP 数据)",
      "form": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "DISABLED",
            "udp": "ENABLED",
            "scert": "ENABLED",
            "tfo": "ENABLED",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Regex Filter",
          "args": {
            "keep": false,
            "regex": [
              "^(#|\\/\\/)"
            ]
          },
          "id": "53433073.30347516",
          "disabled": false
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Google",
            "type": "IPv4",
            "filter": "disabled",
            "cache": "enabled",
            "url": ""
          },
          "id": "40233010.57528247",
          "disabled": false
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Cloudflare",
            "type": "IPv6",
            "filter": "IPOnly",
            "cache": "enabled",
            "url": ""
          },
          "id": "26345051.98838817",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "function operator(proxies = []) {\n    function removeDuplicates(arr, fields) {\n        const map = new Map()\n        return arr.filter(item => {\n            const key = fields.map(field => item[field]).join('-')\n            if (map.has(key)) {\n                return false\n            } else {\n                map.set(key, true)\n                return true\n            }\n        })\n    }\n    return removeDuplicates(proxies, ['server', 'port', 'type']).map(i => {\n      delete i._geo\n      delete i._entrance\n      return i\n    })\n}\n",
            "mode": "script",
            "arguments": {}
          },
          "id": "95704959.8891461",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/entrance.js#cache&entrance&internal&remove_failed&retries=1&timeout=1999",
            "mode": "link",
            "arguments": {
              "cache": true,
              "entrance": true,
              "internal": true,
              "remove_failed": true,
              "retries": "1",
              "timeout": "1999"
            }
          },
          "id": "81096408.2142662",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/geo.js#cache&geo&internal&retries=1&timeout=1999",
            "mode": "link",
            "arguments": {
              "cache": true,
              "geo": true,
              "internal": true,
              "retries": "1",
              "timeout": "1999"
            }
          },
          "id": "13314308.521440443",
          "disabled": false
        },
        {
          "type": "Script Filter",
          "args": {
            "content": "return $server._geo && $server._entrance",
            "mode": "script",
            "arguments": {}
          },
          "id": "75931717.50058809",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "\nconst { _entrance, _geo } = $server\n\nlet entranceFlag = ProxyUtils.getFlag(_entrance.countryCode).replace(/🇹🇼/g, '🇼🇸')\nlet geoFlag = ProxyUtils.getFlag(_geo.countryCode).replace(/🇹🇼/g, '🇼🇸')\n$server.name = (_entrance.aso !== _geo.aso || _entrance.countryCode !== _geo.countryCode) ? `${entranceFlag} ${_entrance.aso} ➮ ${geoFlag} ${_geo.aso} [${$server.type}]` : `${geoFlag} ${_geo.aso} [${$server.type}]`\n\ndelete $server._entrance\ndelete $server._geo",
            "mode": "script",
            "arguments": {}
          },
          "id": "93023814.22544846",
          "disabled": false
        },
        {
          "type": "Sort Operator",
          "args": "asc",
          "id": "38897913.79490925",
          "disabled": false
        },
        {
          "type": "Handle Duplicate Operator",
          "args": {
            "action": "rename",
            "position": "back",
            "template": "⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹",
            "link": ""
          },
          "id": "84882948.57123472",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "// 还原节点域名\n// if ($server._domain) $server.server = $server._domain",
            "mode": "script",
            "arguments": {}
          },
          "id": "54079798.87112482",
          "disabled": false
        }
      ],
      "source": "local",
      "url": "",
      "content": "",
      "ua": "",
      "tag": [
        "检测"
      ],
      "display-name": "入口 & 落地 检测(使用 GEOIP 数据)",
      "subscriptionTags": [],
      "isIconColor": true
    },
    {
      "name": "entrance-test-internal",
      "displayName": "入口检测(使用 GEOIP)",
      "form": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "DISABLED",
            "udp": "ENABLED",
            "scert": "ENABLED",
            "tfo": "ENABLED",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Regex Filter",
          "args": {
            "keep": false,
            "regex": [
              "^(#|\\/\\/)"
            ]
          },
          "id": "53433073.30347516",
          "disabled": false
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Google",
            "type": "IPv4",
            "filter": "disabled",
            "cache": "enabled",
            "url": ""
          },
          "id": "40233010.57528247",
          "disabled": false
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Cloudflare",
            "type": "IPv6",
            "filter": "IPOnly",
            "cache": "enabled",
            "url": ""
          },
          "id": "26345051.98838817",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "function operator(proxies = []) {\n    function removeDuplicates(arr, fields) {\n        const map = new Map()\n        return arr.filter(item => {\n            const key = fields.map(field => item[field]).join('-')\n            if (map.has(key)) {\n                return false\n            } else {\n                map.set(key, true)\n                return true\n            }\n        })\n    }\n    return removeDuplicates(proxies, ['server', 'port', 'type']).map(i => {\n\n      delete i._entrance\n      return i\n    })\n}\n",
            "mode": "script"
          },
          "id": "95704959.8891461",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/entrance.js#entrance&timeout=1999&retries=1&remove_failed&cache&internal&format={{ProxyUtils.getFlag(api.countryCode || api.country || '').replace(/🇹🇼/g, '🇼🇸')}} {{api.aso || api.isp || ''}} [{{proxy.type}}] - {{proxy.name}}",
            "mode": "link"
          },
          "id": "81096408.2142662",
          "disabled": false
        },
        {
          "type": "Sort Operator",
          "args": "asc",
          "id": "38897913.79490925",
          "disabled": false
        },
        {
          "type": "Handle Duplicate Operator",
          "args": {
            "action": "rename",
            "position": "back",
            "template": "⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹",
            "link": ""
          },
          "id": "84882948.57123472",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "// 还原节点域名\n// if ($server._domain) $server.server = $server._domain",
            "mode": "script"
          },
          "id": "54079798.87112482",
          "disabled": false
        }
      ],
      "source": "local",
      "url": "",
      "content": "小一, [2025/2/10 17:59]\nvmess://ewogICJhZGQiOiAiNDUuMTk2LjIzNS4xNTIiLAogICJhaWQiOiAwLAogICJpZCI6ICJiZDBkNWM2OC0wY2JkLTRkMzQtOTEwZC03MDI1MmUzZDQ2NmEiLAogICJuZXQiOiAid3MiLAogICJwYXRoIjogIi8iLAogICJwb3J0IjogNDA4NjMsCiAgInBzIjogInZtZXNzLTQwODYzIiwKICAidGxzIjogIm5vbmUiLAogICJ2IjogMgp9\n\n小一, [2025/2/10 17:59]\nhysteria2://Xr2Hhv37NZ@45.196.235.152:34817?fastopen=0&insecure=1&sni=a.com#hysteria2-34817",
      "ua": "",
      "tag": [
        "检测"
      ],
      "display-name": "入口检测(使用 GEOIP)",
      "subscriptionTags": []
    },
    {
      "name": "entrance-test",
      "displayName": "入口检测",
      "form": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Lab.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "DISABLED",
            "udp": "ENABLED",
            "scert": "ENABLED",
            "tfo": "ENABLED",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Regex Filter",
          "args": {
            "keep": false,
            "regex": [
              "^(#|\\/\\/)"
            ]
          },
          "id": "53433073.30347516"
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Google",
            "type": "IPv4",
            "filter": "disabled",
            "cache": "enabled"
          },
          "id": "40233010.57528247"
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Cloudflare",
            "type": "IPv6",
            "filter": "IPOnly",
            "cache": "enabled"
          },
          "id": "26345051.98838817"
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "function operator(proxies = []) {\n    function removeDuplicates(arr, fields) {\n        const map = new Map()\n        return arr.filter(item => {\n            const key = fields.map(field => item[field]).join('-')\n            if (map.has(key)) {\n                return false\n            } else {\n                map.set(key, true)\n                return true\n            }\n        })\n    }\n    return removeDuplicates(proxies, ['server', 'port', 'type']).map(i => {\n\n      delete i._entrance\n      return i\n    })\n}\n",
            "mode": "script"
          },
          "id": "95704959.8891461"
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/entrance.js#entrance&timeout=1999&retries=1&remove_failed&cache&format= {{ProxyUtils.getFlag(api.countryCode || api.country || '').replace(/🇹🇼/g, '🇼🇸')}} {{api.aso || api.isp || ''}} [{{proxy.type}}] - {{proxy.name}}",
            "mode": "link"
          },
          "id": "81096408.2142662"
        },
        {
          "type": "Sort Operator",
          "args": "asc",
          "id": "38897913.79490925"
        },
        {
          "type": "Handle Duplicate Operator",
          "args": {
            "action": "rename",
            "position": "back",
            "template": "⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹",
            "link": ""
          },
          "id": "84882948.57123472"
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "// 还原节点域名\n// if ($server._domain) $server.server = $server._domain",
            "mode": "script"
          },
          "id": "54079798.87112482"
        }
      ],
      "source": "local",
      "url": "",
      "content": "vmess://ewogICJ2IjogIjIiLAogICJwcyI6ICLmmJ/muIrlhaznm4roioLngrktVVPlhbHkuqs1Z+W4puWuvS1zdGFyZGVlcCIsCiAgImFkZCI6ICIyMDcuNzguMTAwLjEzNSIsCiAgInBvcnQiOiA0NDMsCiAgImlkIjogIjAzYjQzMWQ3LWFlYjAtNDc1Mi1iNjEzLWQwNTU4YzRiYjUwYSIsCiAgIm5ldCI6ICJ0Y3AiLAogICJ0eXBlIjogImh0dHAiLAogICJ0bHMiOiAibm9uZSIsCiAgInBhdGgiOiAiLyIKfQ==",
      "ua": "",
      "tag": [
        "检测"
      ],
      "display-name": "入口检测"
    },
    {
      "name": "telegram-@ShareCentrePro",
      "displayName": "Telegram @ShareCentrePro",
      "form": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Telegram.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "ENABLED",
            "udp": "ENABLED",
            "scert": "ENABLED",
            "tfo": "DEFAULT",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "async function operator(proxies = [], targetPlatform, context) {\n  const $ = $substore\n  const _ = lodash\n  \n  // 从网页抓取内容\n  const { body } = await $.http.get({\n    // 改这个 自己在浏览器打开看看是不是包含内容\n    url: 'https://t.me/s/ShareCentrePro',\n    headers: {\n      'User-Agent':\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.14',\n    },\n  })\n\n  // 正则匹配节点 演示只有 vmess 和 trojan 自己处理\n  const regexp = />((vmess|trojan):\\/\\/.*?)</gi\n  const links = []\n  while ((link = regexp.exec(body)?.[1])) {\n    if (link.length >= 30) {\n      links.push(_.unescape(link))\n    }\n  }\n\n  return ProxyUtils.parse(links.join('\\n'))\n}\n",
            "mode": "script"
          },
          "id": "54385519.38434975",
          "disabled": false
        },
        {
          "type": "Handle Duplicate Operator",
          "args": {
            "action": "rename",
            "position": "back",
            "template": "0 1 2 3 4 5 6 7 8 9",
            "link": "-"
          },
          "id": "37695486.71881706",
          "disabled": false
        }
      ],
      "source": "local",
      "url": "",
      "content": "",
      "ua": "",
      "tag": [
        "爬虫"
      ],
      "display-name": "Telegram @ShareCentrePro",
      "subscriptionTags": []
    },
    {
      "name": "upload",
      "displayName": "",
      "form": "",
      "remark": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Star.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "DISABLED",
            "udp": "DEFAULT",
            "scert": "DEFAULT",
            "tfo": "DEFAULT",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "async function operator(proxies = []) {  \n  const groups = proxies.reduce((acc, proxy) => {\n    const emojiMatch = proxy.name.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/);\n    const groupKey = emojiMatch ? emojiMatch[0] : 'other';\n\n    if (!acc[groupKey]) {\n      acc[groupKey] = [];\n    }\n    acc[groupKey].push(proxy);\n    return acc;\n  }, {});\n\n  const result = Object.values(groups).flatMap(group => {\n    const count = Math.min(1, group.length);\n    const selected = new Set();\n    const groupResult = [];\n\n    while (selected.size < count) {\n      const randomIndex = Math.floor(Math.random() * group.length);\n      if (!selected.has(randomIndex)) {\n        selected.add(randomIndex);\n        groupResult.push(group[randomIndex]);\n      }\n    }\n    \n    return groupResult;\n  });\n\n  return result;\n}",
            "mode": "script",
            "arguments": {}
          },
          "id": "59956407.64583092",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "async function operator(proxies = []) {\n\n  const GITHUB_TOKEN = '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'\n  const GIST_NAME = 'share'\n  const FILENAME = 'free.yaml'\n\n  const $ = $substore\n\n  const { isLoon, isSurge } = $.env\n\n  let files = {}\n\n  let content = await produceArtifact({\n    type: 'subscription',\n    subscription: {},\n    content: 'proxies:\\n' + proxies.map((proxy) => '  - ' + JSON.stringify(proxy) + '\\n').join(''),\n    platform: 'ClashMeta',\n  })\n\n\n  const boundary = '----FormDataBoundary';\n  const fileContent = content;\n  const fileField = 'file';\n  const fileName = 'mihomo.yaml';\n  const fileType = 'text/plain';\n  const formData = `--${boundary}\\r\\n` +\n    `Content-Disposition: form-data; name=\"${fileField}\"; filename=\"${fileName}\"\\r\\n` +\n    `Content-Type: ${fileType}\\r\\n\\r\\n` +\n    `${fileContent}\\r\\n` +\n    `--${boundary}--`;\n\n  const res = await $.http.post({\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${boundary}`,\n      },\n      url: 'https://uhsea.com/Frontend/upload',\n      body: formData,\n      insecure: true,\n  });\n\n  const url = JSON.parse(res.body).data\n  console.log(`屋舍\\n${url}`)\n  if (isSurge) {\n    $notification.post(`🌍 Sub-Store`, '屋舍', url, {\n      action: 'clipboard',\n      text: url\n    })\n  } else {\n    $.notify('🌍 Sub-Store', `${url}`)\n  }\n\n  // const manager = new ProxyUtils.Gist({\n  //     token: GITHUB_TOKEN,\n  //     key: GIST_NAME,\n  // });\n\n  // files[encodeURIComponent(FILENAME)] = {\n  //     content,\n  // };\n\n  // const res = await manager.upload(files);\n  // let body = {};\n  // try {\n  //     body = JSON.parse(res.body);\n  //     // eslint-disable-next-line no-empty\n  // } catch (e) {}\n\n  // // console.log(JSON.stringify(body, null, 2))\n\n  // const raw_url = body.files[encodeURIComponent(FILENAME)]?.raw_url;\n  // console.log(raw_url)\n  // const new_url = raw_url?.replace(/\\/raw\\/[^/]*\\/(.*)/, '/raw/$1');\n  \n  // console.log(new_url)\n  // $.notify('🌍 Sub-Store', `Gist: ${new_url}`)\n  \n  // const catbox = await $.http.post({\n  //     headers: {\n  //         'Content-Type': 'application/x-www-form-urlencoded',\n  //     },\n  //     url: 'https://catbox.moe/user/api.php',\n  //     body: `reqtype=urlupload&url=${encodeURIComponent(raw_url)}`,\n  // });\n  // console.log(catbox.body)\n\n  // if (isSurge) {\n  //   $notification.post(`🌍 Sub-Store`, 'CatBox', catbox.body, {\n  //     action: 'clipboard',\n  //     text: catbox.body\n  //   })\n  // } else {\n  //   $.notify('🌍 Sub-Store', `CatBox: ${catbox.body}`)\n  // }\n  \n  return proxies\n} ",
            "mode": "script",
            "arguments": {}
          },
          "id": "8264394.167872635",
          "disabled": false
        }
      ],
      "source": "local",
      "url": "",
      "content": "🇨🇱 BrainStorm Network Inc [ss]=ss,37.143.128.125,20012,encrypt-method=aes-256-gcm,password=\"TVSQ8NM0HV9SIO6P\",tfo=true,udp-relay=true\n🇨🇾 BrainStorm Network Inc [ss]=ss,91.148.135.48,20039,encrypt-method=aes-256-gcm,password=\"5E6IHTYUNMT5SPMM\",tfo=true,udp-relay=true\n🇩🇪 netcup GmbH [tuic]=tuic-v5,nue.pari.network,12346,uuid=9DBAC6E7-925F-40CC-BAF4-B0C7CC8FF394,password=\"Par1Network\",alpn=h3,sni=off,skip-cert-verify=true,tfo=true,ecn=true\n🇪🇨 BrainStorm Network Inc [ss]=ss,185.47.253.144,20010,encrypt-method=aes-256-gcm,password=\"EISIIBJUTJDH71VH\",tfo=true,udp-relay=true\n🇪🇸 BrainStorm Network Inc [ss]=ss,45.154.206.189,20038,encrypt-method=aes-256-gcm,password=\"V0Y1T1T9B81H5LXY\",tfo=true,udp-relay=true\n🇫🇮 BrainStorm Network Inc [ss]=ss,37.143.129.127,20031,encrypt-method=aes-256-gcm,password=\"5680T8EC67YKOD7E\",tfo=true,udp-relay=true\n🇬🇹 BrainStorm Network Inc [ss]=ss,185.47.254.177,20007,encrypt-method=aes-256-gcm,password=\"3IFQYWKX4MG8A8HX\",tfo=true,udp-relay=true\n🇭🇰 Akari Networks [vmess] 中转²=vmess,monocerotis.weltknoten.xyz,30002,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=monocerotis.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Akari Networks [vmess] 中转³=vmess,orionis.weltknoten.xyz,30003,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=orionis.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Akari Networks [vmess] 中转¹=vmess,phoenicis.weltknoten.xyz,30004,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=phoenicis.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Akari Networks [vmess] 中转⁴=vmess,scorpii.weltknoten.xyz,30020,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=scorpii.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Alibaba US Technology Co. Ltd. [snell]=snell,8.210.92.141,31315,version=4,psk=Rnix8S1yqPm3clKJ,tfo=true,udp-relay=true\n🇭🇰 HKT Limited [vmess] 中转=vmess,andromedae.weltknoten.xyz,30001,username=1e963efa-c099-3a7d-bf47-64db4ea46c8e,vmess-aead=false,tls=true,sni=andromedae.weltknoten.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇭🇰 Hytron Network Services Limited [snell]=snell,hyhk.cnmmb.com,8443,version=4,psk=WoHaoKuaiLeA,tfo=true,udp-relay=true,shadow-tls-password=WoHaoKuaiLeA,shadow-tls-version=3,shadow-tls-sni=gateway.icloud.com,reuse=true\n🇭🇰 Kirino LLC [snell]=snell,37.123.196.21,36415,version=4,psk=KnEtPK9uA0VGcfL5OubXHqdgrg7hf3k,tfo=true,udp-relay=true\n🇭🇰 VELO-LINK [ss]=ss,156.245.190.21,15012,encrypt-method=aes-256-gcm,password=\"BNCZFRSBTG7UV1SX\",tfo=true,udp-relay=true\n🇭🇰 VELO-LINK [ss] 中转=ss,qh62onjn.slashdevslashnetslashtun.net,15015,encrypt-method=aes-256-gcm,password=\"DJSTDVLRNHY16FOF\",tfo=true,udp-relay=true\n🇯🇵 AMAZON-02 [snell]=snell,52.195.206.4,8648,version=4,psk=1d213G22133W~QtJdOfsdWhgsblqjrnSHO,tfo=true,udp-relay=true\n🇯🇵 AMAZON-02 [trojan]=trojan,52.199.150.136,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 AMAZON-02 [vmess]²=vmess,52.199.45.83,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 AMAZON-02 [vmess]¹=vmess,52.198.199.96,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 CTG Server Limited [vmess]=vmess,134.122.150.8,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 Ducky Cloud Technologies Limited [hysteria2]=hysteria2,2a0f:7803:fac5:4f02::1,16884,password=\"6c7a6a6a-6a6a-4000-8000-000000000002\",skip-cert-verify=true,tfo=true\n🇯🇵 Tencent Building Kejizhongyi Avenue [trojan]=trojan,43.167.220.90,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇯🇵 WAP.AC LTD [snell]=snell,103.238.129.37,30002,version=4,psk=DfUAx9s78Jbc2Ycj,tfo=true,udp-relay=true,reuse=true\n🇰🇷 Korea Telecom [ss]=ss,222.112.15.140,56780,encrypt-method=aes-256-cfb,password=\"qwerREWQ@@\",tfo=true,udp-relay=true\n🇰🇷 Tencent Building Kejizhongyi Avenue [trojan]=trojan,101.33.74.37,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇱🇹 BrainStorm Network Inc [ss]=ss,185.237.185.77,20036,encrypt-method=aes-256-gcm,password=\"J7VVN0TTTMPFB9MN\",tfo=true,udp-relay=true\n🇳🇱 BrainStorm Network Inc [ss]=ss,109.104.154.131,20000,encrypt-method=aes-256-gcm,password=\"T5UGBUFB9J44532W\",tfo=true,udp-relay=true\n🇳🇴 BrainStorm Network Inc [ss]=ss,185.90.61.157,20034,encrypt-method=aes-256-gcm,password=\"ZGCCDSEBPUFZWWF1\",tfo=true,udp-relay=true\n🇵🇪 BrainStorm Network Inc [ss]=ss,185.47.252.16,20009,encrypt-method=aes-256-gcm,password=\"15UWG9L5E57JILLZ\",tfo=true,udp-relay=true\n🇵🇱 BrainStorm Network Inc [ss]=ss,92.118.205.219,20037,encrypt-method=aes-256-gcm,password=\"6LUHOJNHBOZTISZI\",tfo=true,udp-relay=true\n🇷🇺 LLC Baxet [hysteria2]²=hysteria2,46.17.41.217,30033,password=\"dongtaiwang.com\",sni=www.bing.com,skip-cert-verify=true,tfo=true\n🇷🇺 LLC Baxet [hysteria2]³=hysteria2,45.129.2.108,50850,password=\"dongtaiwang.com\",sni=www.bing.com,skip-cert-verify=true,tfo=true\n🇷🇺 LLC Baxet [hysteria2]¹=hysteria2,46.29.163.171,30033,password=\"dongtaiwang.com\",sni=www.bing.com,skip-cert-verify=true,tfo=true\n🇸🇪 BrainStorm Network Inc [ss]=ss,185.186.78.220,20035,encrypt-method=aes-256-gcm,password=\"C6A2UYWZ9390Q4Y2\",tfo=true,udp-relay=true\n🇸🇬 Alibaba US Technology Co. Ltd. [snell]=snell,8.219.72.1,56341,version=4,psk=dqWlVs6Kd2wU10m5,tfo=true,udp-relay=true\n🇸🇬 Coaxial Cable LLC ➮ 🇬🇧 Mythic Beasts Ltd [snell]=snell,2a14:7dc0:100:1013::2fe,50205,version=4,psk=PZ7cg6fZtSgv8RCJC8Av,tfo=true,udp-relay=true,reuse=true\n🇸🇬 DIGITALOCEAN-ASN [trojan]=trojan,165.22.55.125,443,password=\"b0b861c2c85346a389b9e95769c3cba4\",tls=true,sni=creativejobmarket.online,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 Dromatics Systems Pte Ltd [snell]=snell,103.195.189.166,31927,version=4,psk=xq6nOQNGSzik1V41,tfo=true,udp-relay=true\n🇸🇬 LEASEWEB SINGAPORE PTE. LTD. [snell]=snell,194.127.192.250,13000,version=4,psk=0Ah1HHzDc1Nmt42i,tfo=true,udp-relay=true,reuse=true\n🇸🇬 ORACLE-BMC-31898 [snell]²=snell,213.35.105.166,43254,version=4,psk=5GrbAIGuTBW9C1Cp,tfo=true,udp-relay=true\n🇸🇬 ORACLE-BMC-31898 [snell]³=snell,2603:c024:4506:9daa:f879:f945:e96f:9007,43254,version=4,psk=5GrbAIGuTBW9C1Cp,tfo=true,udp-relay=true\n🇸🇬 ORACLE-BMC-31898 [snell]¹=snell,129.150.61.95,2345,version=4,psk=6L4nGby8vj2Va1qF,tfo=true,udp-relay=true,reuse=true\n🇸🇬 Tencent Building Kejizhongyi Avenue [trojan]²=trojan,43.156.229.234,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇸🇬 Tencent Building Kejizhongyi Avenue [trojan]¹=trojan,43.163.88.120,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 1GSERVERS [snell]=snell,23.146.40.167,2345,version=4,psk=FWI73TXnkQpNhQKO,tfo=true,udp-relay=true,reuse=true\n🇺🇸 BACK WAVES LIMITED [snell]=snell,23.130.4.23,54210,version=4,psk=vknO59ftfNWMLktraazo,tfo=true,udp-relay=true,reuse=true\n🇺🇸 COGENT-174 [trojan]=trojan,38.69.245.118,27974,password=\"8oICfXVe2T\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 COGENT-174 [vmess]=vmess,216.151.163.240,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 DMIT [snell]²=snell,154.17.237.69,64231,version=4,psk=XUZMoHfwESlHEnULIWvt,tfo=true,udp-relay=true,reuse=true\n🇺🇸 DMIT [snell]¹=snell,154.17.238.12,32143,version=4,psk=deyFTuaOwftpAeYi,tfo=true,udp-relay=true\n🇺🇸 HURRICANE ➮ 🇺🇸 NETLAB-SDN [hysteria2]=hysteria2,2001:0470:1f07:0b6f:0000:0000:9716:252b,8883,password=\"c4ba2871-d699-49db-b8ba-afbb554a5741\",skip-cert-verify=true,tfo=true\n🇺🇸 IT7NET [trojan]=trojan,192.243.115.171,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 MULTA-ASN1 [trojan]²=trojan,142.171.47.181,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 MULTA-ASN1 [trojan]¹=trojan,74.48.39.132,39039,password=\"Y8xckxoQX8cdHhqL91xJ\",ws=true,ws-path=/fucku,ws-headers=Host:\"bing.com\",tls=true,sni=bing.com,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 NETLAB-SDN [vmess]=vmess,154.9.230.14,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 ORACLE-BMC-31898 [snell]=snell,146.235.219.32,23154,version=4,psk=Xu12Ih2xX0IggQZH,obfs=http,obfs-host=www.bing.com,tfo=true,udp-relay=true\n🇺🇸 PEG-SV [vmess]²=vmess,38.33.56.52,37001,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/1745045037032,vmess-aead=false,tls=true,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 PEG-SV [vmess]³=vmess,38.63.220.185,37009,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/1736935981795,vmess-aead=false,tls=true,sni=www.82326368.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 PEG-SV [vmess]¹=vmess,198.200.37.252,36000,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/001318291915,vmess-aead=false,tls=true,sni=www.87365591.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 PEG-SV [vmess]⁴=vmess,142.4.96.198,31004,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/1732268269282,vmess-aead=false,tls=true,sni=www.46554484.xyz,skip-cert-verify=true,tfo=true,udp-relay=true\n🇺🇸 PEG-SV [vmess]⁵=vmess,108.186.26.168,37004,username=418048af-a293-4b99-9b0c-98ca3580dd24,ws=true,ws-path=/path/1736503352193,vmess-aead=false,tls=true,skip-cert-verify=true,tfo=true,udp-relay=true",
      "ua": "",
      "tag": [],
      "subscriptionTags": [],
      "display-name": "",
      "isIconColor": true
    },
    {
      "name": "upload-all",
      "displayName": "",
      "form": "",
      "remark": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": false,
      "icon": "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Star.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "DISABLED",
            "udp": "DEFAULT",
            "scert": "DEFAULT",
            "tfo": "DEFAULT",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "async function operator(proxies = []) {\n\n  const GITHUB_TOKEN = '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'\n  const GIST_NAME = 'share'\n  const FILENAME = 'free.yaml'\n\n  const $ = $substore\n\n  const { isLoon, isSurge } = $.env\n\n  let files = {}\n\n  let content = await produceArtifact({\n    type: 'subscription',\n    subscription: {},\n    content: 'proxies:\\n' + proxies.map((proxy) => '  - ' + JSON.stringify(proxy) + '\\n').join(''),\n    platform: 'ClashMeta',\n  })\n\n\n  const boundary = '----FormDataBoundary';\n  const fileContent = content;\n  const fileField = 'file';\n  const fileName = 'mihomo.yaml';\n  const fileType = 'text/plain';\n  const formData = `--${boundary}\\r\\n` +\n    `Content-Disposition: form-data; name=\"${fileField}\"; filename=\"${fileName}\"\\r\\n` +\n    `Content-Type: ${fileType}\\r\\n\\r\\n` +\n    `${fileContent}\\r\\n` +\n    `--${boundary}--`;\n\n  const res = await $.http.post({\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${boundary}`,\n      },\n      url: 'https://uhsea.com/Frontend/upload',\n      body: formData,\n      insecure: true,\n  });\n\n  const url = JSON.parse(res.body).data\n  console.log(`屋舍\\n${url}`)\n  if (isSurge) {\n    $notification.post(`🌍 Sub-Store`, '屋舍', url, {\n      action: 'clipboard',\n      text: url\n    })\n  } else {\n    $.notify('🌍 Sub-Store', `${url}`)\n  }\n\n  // const manager = new ProxyUtils.Gist({\n  //     token: GITHUB_TOKEN,\n  //     key: GIST_NAME,\n  // });\n\n  // files[encodeURIComponent(FILENAME)] = {\n  //     content,\n  // };\n\n  // const res = await manager.upload(files);\n  // let body = {};\n  // try {\n  //     body = JSON.parse(res.body);\n  //     // eslint-disable-next-line no-empty\n  // } catch (e) {}\n\n  // // console.log(JSON.stringify(body, null, 2))\n\n  // const raw_url = body.files[encodeURIComponent(FILENAME)]?.raw_url;\n  // console.log(raw_url)\n  // const new_url = raw_url?.replace(/\\/raw\\/[^/]*\\/(.*)/, '/raw/$1');\n  \n  // console.log(new_url)\n  // $.notify('🌍 Sub-Store', `Gist: ${new_url}`)\n  \n  // const catbox = await $.http.post({\n  //     headers: {\n  //         'Content-Type': 'application/x-www-form-urlencoded',\n  //     },\n  //     url: 'https://catbox.moe/user/api.php',\n  //     body: `reqtype=urlupload&url=${encodeURIComponent(raw_url)}`,\n  // });\n  // console.log(catbox.body)\n\n  // if (isSurge) {\n  //   $notification.post(`🌍 Sub-Store`, 'CatBox', catbox.body, {\n  //     action: 'clipboard',\n  //     text: catbox.body\n  //   })\n  // } else {\n  //   $.notify('🌍 Sub-Store', `CatBox: ${catbox.body}`)\n  // }\n  \n  return proxies\n} ",
            "mode": "script",
            "arguments": {}
          },
          "id": "8264394.167872635",
          "disabled": false
        }
      ],
      "source": "local",
      "url": "",
      "content": "🇯🇵 AMAZON-02 [vmess]²=vmess,52.198.199.96,23556,username=faf171ee-d211-4e25-a645-6ac087e48bfb,ws=true,ws-path=/demo.mp4,vmess-aead=true,skip-cert-verify=true,tfo=true,udp-relay=true\n",
      "ua": "",
      "tag": [],
      "subscriptionTags": [],
      "display-name": ""
    }
  ],
  "collections": [
    {
      "name": "share-collection",
      "displayName": "自建分享 - 合集",
      "form": "",
      "mergeSources": "",
      "ignoreFailedRemoteSub": true,
      "icon": "https://raw.githubusercontent.com/Orz-3/mini/master/Alpha/Personal.png",
      "process": [
        {
          "type": "Quick Setting Operator",
          "args": {
            "useless": "DISABLED",
            "udp": "ENABLED",
            "scert": "ENABLED",
            "tfo": "ENABLED",
            "vmess aead": "DEFAULT"
          }
        },
        {
          "type": "Regex Filter",
          "args": {
            "keep": false,
            "regex": [
              "^(#|\\/\\/)",
              "🇨🇳|中国"
            ]
          },
          "id": "53433073.30347516",
          "disabled": false
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Google",
            "type": "IPv4",
            "filter": "disabled",
            "cache": "enabled",
            "url": ""
          },
          "id": "40233010.57528247",
          "disabled": false
        },
        {
          "type": "Resolve Domain Operator",
          "args": {
            "provider": "Cloudflare",
            "type": "IPv6",
            "filter": "IPOnly",
            "cache": "enabled",
            "url": ""
          },
          "id": "26345051.98838817",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "function operator(proxies = []) {\n    function removeDuplicates(arr, fields) {\n        const map = new Map()\n        return arr.filter(item => {\n            const key = fields.map(field => item[field]).join('-')\n            if (map.has(key)) {\n                return false\n            } else {\n                map.set(key, true)\n                return true\n            }\n        })\n    }\n    return removeDuplicates(proxies, ['server', 'port', 'type']).map(i => {\n      delete i._geo\n      delete i._entrance\n      return i\n    })\n}\n",
            "mode": "script"
          },
          "id": "95704959.8891461",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/entrance.js#internal&entrance&timeout=2999&retries=1&remove_failed&cache",
            "mode": "link"
          },
          "id": "81096408.2142662",
          "disabled": false
        },
        {
          "type": "Regex Filter",
          "args": {
            "keep": false,
            "regex": [
              "CLOUDFLARE|cloudfalre|Cloudfalre|CloudFalre"
            ]
          },
          "id": "18115156.477018535",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/check/geo.js#internal&geo&timeout=2999&retries=1&cache",
            "mode": "link"
          },
          "id": "13314308.521440443",
          "disabled": false
        },
        {
          "type": "Script Filter",
          "args": {
            "content": "return $server._geo && $server._entrance",
            "mode": "script"
          },
          "id": "75931717.50058809",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "\nconst { _entrance, _geo } = $server\n\nlet entranceFlag = ProxyUtils.getFlag(_entrance.countryCode).replace(/🇹🇼/g, '🇼🇸')\nlet geoFlag = ProxyUtils.getFlag(_geo.countryCode).replace(/🇹🇼/g, '🇼🇸')\n$server.name = (_entrance.aso !== _geo.aso || _entrance.countryCode !== _geo.countryCode) ? `${entranceFlag} ${_entrance.aso} ➮ ${geoFlag} ${_geo.aso} [${$server.type}]` : `${geoFlag} ${_geo.aso} [${$server.type}]`\n\ndelete $server._entrance\ndelete $server._geo",
            "mode": "script"
          },
          "id": "93023814.22544846",
          "disabled": false
        },
        {
          "type": "Regex Filter",
          "args": {
            "keep": false,
            "regex": [
              "CLOUDFLARE|cloudfalre|Cloudfalre|CloudFalre"
            ]
          },
          "id": "68137673.99060959",
          "disabled": false
        },
        {
          "type": "Sort Operator",
          "args": "asc",
          "id": "38897913.79490925",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "// 还原节点域名\nif ($server._domain) $server.server = $server._domain",
            "mode": "script"
          },
          "id": "54079798.87112482",
          "disabled": false
        },
        {
          "type": "Regex Rename Operator",
          "args": [
            {
              "expr": "🇨🇳.*➮(.*)$",
              "now": "$1 中转"
            }
          ],
          "id": "54804300.84477237",
          "disabled": false
        },
        {
          "type": "Handle Duplicate Operator",
          "args": {
            "action": "rename",
            "position": "back",
            "template": "⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹",
            "link": ""
          },
          "id": "84882948.57123472",
          "disabled": false
        },
        {
          "type": "Sort Operator",
          "args": "asc",
          "id": "46763686.03493306",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "function operator(proxies, targetPlatform) {\n  const SUBS_KEY = 'subs'\n  const $ = $substore\n  const subs = $.read(SUBS_KEY).map(i => {\n    if(i.name === 'share') {\n      i.content = ProxyUtils.produce(proxies, 'Surge')\n    }\n    return i\n  })\n  $.write(subs, SUBS_KEY)\n  return proxies\n}",
            "mode": "script"
          },
          "id": "18293554.935067836",
          "disabled": false
        },
        {
          "type": "Script Operator",
          "args": {
            "content": "async function operator(proxies = [], targetPlatform, context) {\n  const GIST_NAME = 'Sub-Store Share'\n  \n  const $ = $substore\n\n  const settings = $.read('settings') || {}\n  const GITHUB_TOKEN = $arguments?.token || settings.gistToken\n\n\n  const { isLoon, isSurge } = $.env\n\n  let files = {\n\n    [encodeURIComponent('mihomo')]: {\n      content: ProxyUtils.produce([...proxies], 'ClashMeta'),\n    },\n\n  }\n\n  const manager = new ProxyUtils.Gist({\n    token: GITHUB_TOKEN,\n    key: GIST_NAME,\n  })\n\n  const res = await manager.upload(files)\n  let body = {}\n  try {\n    body = JSON.parse(res.body)\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  $.info(JSON.stringify(body, null, 2))\n\n  // const raw_url = body.files[encodeURIComponent(FILENAME)]?.raw_url\n  // const new_url = raw_url?.replace(/\\/raw\\/[^/]*\\/(.*)/, '/raw/$1')\n\n  // $.info(`已上传至 ${new_url}`)\n  // if (isSurge) {\n  //   $notification.post(`🌍 Sub-Store`, 'Gist', `点击复制 ${new_url}`, {\n  //     action: 'clipboard',\n  //     text: new_url,\n  //   })\n  // } else {\n  //   $.notify('🌍 Sub-Store', `Gist: ${new_url}`)\n  // }\n\n  return proxies\n} ",
            "mode": "script"
          },
          "id": "55457553.16581265",
          "disabled": false
        }
      ],
      "subscriptions": [
        "share"
      ],
      "tag": [],
      "display-name": "自建分享 - 合集",
      "subscriptionTags": []
    }
  ],
  "artifacts": [
    {
      "name": "share",
      "displayName": "",
      "icon": "",
      "source": "share-collection",
      "type": "collection",
      "platform": "Surge",
      "includeUnsupportedProxy": false,
      "sync": true,
      "updated": 1752821686913,
      "url": "https://gist.githubusercontent.com/KatoEmiri/341689f0b403ba6b7303a08251d4d229/raw/share"
    }
  ],
  "rules": [],
  "schemaVersion": "2.0",
  "files": [],
  "modules": [],
  "settings": {
    "syncPlatform": "",
    "githubUser": "KatoEmiri",
    "gistToken": "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",
    "defaultUserAgent": "",
    "defaultTimeout": "8000",
    "cacheThreshold": "",
    "avatarUrl": "https://avatars.githubusercontent.com/u/71332701?v=4",
    "artifactStore": "https://gist.github.com/KatoEmiri/341689f0b403ba6b7303a08251d4d229",
    "artifactStoreStatus": "VALID",
    "theme": {
      "auto": false,
      "name": "dark",
      "dark": "dark",
      "light": "light"
    },
    "syncTime": 1752831004105,
    "appearanceSetting": {
      "isSimpleMode": true,
      "isLeftRight": false,
      "isDefaultIcon": false,
      "isIconColor": true,
      "isShowIcon": true,
      "isSimpleShowRemark": "",
      "isEditorCommon": true,
      "isSimpleReicon": true,
      "isSubItemMenuFold": false,
      "showFloatingRefreshButton": false,
      "showFloatingAddButton": false,
      "displayPreviewInWebPage": true,
      "istabBar": false,
      "istabBar2": false,
      "subProgressStyle": "background"
    },
    "defaultProxy": "",
    "gistTokenMd5": "71a874b61bbebc1560489804b53dfadc"
  },
  "tokens": []
}